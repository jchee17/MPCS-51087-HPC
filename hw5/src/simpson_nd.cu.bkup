#include <stdlib.h>
#include <stdio.h>
#include <assert.h>
#include <math.h>
#include <cuda.h>

#define NDIM 5
#define THREADS_PER_BLOCK 128

__host__ __device__ float f( float x[] )
{
	return exp(-x[0]*x[0] -x[1]*x[1] -x[2]*x[2]  -x[3]*x[3] -x[4]*x[4]);
}

__global__ void simpson_integration(int *mesh_device, float *x_device,
		float *w_device, float *integral_device)
{
	int index = blockIdx.x * blockDim.x + threadIdx.x;




}

int main(int argc, char **argv)
{
	// Host variables
	float host_integral, delta, h;
	int n;
	float a, b;
	int i,ii,j,jj,k,kk,l,ll,m,mm;
	cudaEvent_t start, stop;
	float milliseconds;
	int *mesh_host;
	float *x_host, w_host[3];

	a = 0.0; b = 1.0;
	n = atoi(argv[1]);

	delta = (b-a)/n;
	h = delta / 2.0;
	w[0] = h/3; w[1] = 4.*w[0]; w[2] = w[0];

	milliseconds = 0.0;
	cudaEventCreate(&start);
	cudaEventCreate(&stop);


	long long int max = 3*n*(3*n*(3*n*(3*n*(3*n+1)+1)+1)+1);
	mesh_host = (int *) malloc( max * sizeof(int));
	x_host = (float *) malloc( max * sizeof(float));

	long long int index_host = 0;
	for (i = 0; i < n; i++){
		for(ii = 0; ii < 3; ii++){
			mesh_host[index_host] = ii;
			x_host[index_host] = a + i * delta + ii * h;
			index_host++;
			for (j = 0; j < n; j++){
				for(jj = 0; jj < 3; jj++){
					mesh_host[index_host] = jj;
					x_host[index_host] = a + j * delta + jj * h;
					index_host++;
					for (k = 0; k < n; k++){
						for(kk = 0; kk < 3; kk++){
							mesh_host[index_host] = kk;
							x_host[index_host] = a + k * delta + kk * h;
							index_host++;
							for (l = 0; l < n; l++){
								for(ll = 0; ll < 3; ll++){
									mesh_host[index_host] = ll;
									x_host[index_host] = a + l * delta + ll * h;
									index_host++;
									for (m = 0; m < n; m++){
										for(mm = 0; mm < 3; mm++){
											mesh_host[index_host] = mm;
											x_host[index_host] = a + m * delta + mm * h;
											index_host++;
										}
									}
								}
							}
						}
					}
				}
			}
		}
	}

	// Device varibles
	int *mesh_device;
	int *n_device;
	float *integral_device, x_device, w_device, zero;

	cudaMalloc(&mesh_device, max * sizeof(int));
	cudaMemcpy(mesh_device, mesh_host, max * sizeof(int), cudaMemcpyHostToDevice);

	cudaMalloc(&x_device, max * sizeof(float));
	cudaMemcpy(x_device, x_host, max * sizeof(float), cudaMemcpyHostToDevice);

	cudaMalloc(&w_device, 3*sizeof(float));
	cudaMemcpy(w_device, w_host, 3 * sizeof(float), cudaMemcpyHostToDevice);

	zero = 0.0;
	cudaMalloc(&integral_device, sizeof(float));
	cudaMemcpy(integral_device, &zero, sizeof(float), cudaMemcpyHostToDevice);

	// Run on device
	simpson_integration<<< n/THREADS_PER_BLOCK, THREADS_PER_BLOCK >>> (
			mesh_device, x_device, w_device, integral_device);

	free(mesh_host);
	free(x_host);
	cudaFree(mesh_device);
	cudafree(integral_device);
}
